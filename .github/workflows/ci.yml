name: CI & Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'   # nightly at 02:00 UTC

permissions:
  contents: read
  security-events: write   # for CodeQL uploads
  id-token: write          # for Pages deploy if you chain here

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ─────────────────────────────
  # 1) CodeQL security scan (push & schedule only)
  codeql:
    name: CodeQL Scan
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, ruby

      - name: Autobuild Jekyll
        run: bundle exec jekyll build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ─────────────────────────────
  # 2) Commit‐message & code lint
  lint:
    name: Commit & Code Lint
    needs: codeql
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v6.2.1
        with:
          configFile: .commitlintrc.json

      - name: Set up Node.js (with Yarn cache)
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: npm run lint:js
      - run: npm run lint:scss

  # ─────────────────────────────
  # 3) Build, link‑check, perf & accessibility
  test:
    name: Build & Test Site
    needs: lint
    runs-on: ubuntu-latest
    environment: github-pages
    strategy:
      matrix:
        node: [18, 20]
        ruby: [3.0, 3.1]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Jekyll doctor
        run: bundle exec jekyll doctor --verbose

      - name: Build site
        run: bundle exec jekyll build

      - name: Cache HTML‑Proofer gems
        uses: actions/cache@v3
        with:
          path: ~/.gem
          key: htmlproofer-${{ matrix.ruby }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: Validate HTML & links
        run: |
          gem install html-proofer
          htmlproofer ./_site \
            --assume-extension \
            --disable-external \
            --allow-missing-href \
            --ignore-empty-mailto \
            --checks-to-ignore Images

      - name: Serve static `_site`
        run: |
          npm install -g http-server
          http-server ./_site -p 4000 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          npx @lhci/cli autorun \
            --chrome-flags="--ignore-certificate-errors --disable-web-security" \
            --url=http://localhost:4000

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci

      - name: Run Axe accessibility tests
        run: node axe-test.js --url=http://localhost:4000

      - name: Upload Axe results
        uses: actions/upload-artifact@v4
        with:
          name: axe-results
          path: axe-results

  # ─────────────────────────────
  # 4) PR‑only accessibility comments
  accessibility:
    name: Accessibility PR Comment
    needs: test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Serve `_site` for Axe
        run: |
          npm install -g http-server
          http-server ./_site -p 4000 &
          sleep 5

      - uses: w3c/axe-action@v1
        with:
          url: http://localhost:4000
          options: "--save results.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ─────────────────────────────
  # 5) Slack alert on any failure
  notify:
    name: Slack Notifications
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - uses: slackapi/slack-github-action@v1
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#ci-notifications'
          text: ":warning: *CI failed* on `${{ github.ref }}` — <${{ github.run_url }}|details>"